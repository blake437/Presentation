name: Summarize new issues and comments

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]

jobs:
  prepare_resources:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      models: read
      contents: read
    outputs:
      comments: ${{ steps.get_comments.outputs.comments }}
      labels: ${{ steps.get_labels.outputs.labels }}
      repo: ${{ steps.get_repo.outputs.repo }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch past comments (if comment event)
        if: github.event_name == 'issue_comment'
        id: get_comments
        run: |
          COMMENTS=$(gh api repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments --paginate --jq '.[].body' | jq -Rs .)
          echo "comments=$COMMENTS" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get issue labels
        id: get_labels
        run: |
          LABELS=$(gh api repos/${{ github.repository }}/issues/${{ github.event.issue.number }} --jq '.labels[].name' | jq -Rs .)
          echo "labels=$LABELS" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get repo metadata
        id: get_repo
        run: |
          REPO_DATA=$(gh api repos/${{ github.repository }})
          echo "repo=$REPO_DATA" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  run_ai:
    needs: prepare_resources
    runs-on: ubuntu-latest
    permissions:
      issues: write
      models: read
      contents: read
    outputs:
      response: ${{ steps.inference.outputs.response }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run AI inference
        id: inference
        uses: actions/ai-inference@v1
        with:
          prompt: |
            {% if github.event_name == 'issues' %}
            Summarize the following GitHub issue in one paragraph:
            Title: ${{ github.event.issue.title }}
            Body: ${{ github.event.issue.body }}
            Labels: ${{ needs.prepare_resources.outputs.labels }}
            Repo: ${{ needs.prepare_resources.outputs.repo }}
            Try to find possible solutions.
            {% else %}
            Summarize the following GitHub comment in one paragraph:
            Issue Title: ${{ github.event.issue.title }}
            Comment: ${{ github.event.comment.body }}
            All Past Comments: ${{ needs.prepare_resources.outputs.comments }}
            Labels: ${{ needs.prepare_resources.outputs.labels }}
            Repo: ${{ needs.prepare_resources.outputs.repo }}
            Try to find possible solutions with the new information.
            {% endif %}
            List the possible solutions. Format the solutions as a bulleted list in MarkDown.
            
  list_fixes:
    needs: run_ai
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          echo "${{ needs.run_ai.outputs.response }}" > ai_response.md
          csplit --quiet --prefix=fix_ --suffix-format='%02d.md' ai_response.md '/^\* /' '{*}'
          rm fix_00.md || true
          find . -name "fix_*.md" | sort > fix_files.txt

  write_fixes_and_prs:
   needs: list_fixes
   runs-on: ubuntu-latest
   env:
     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
   steps:
     - name: checkout repository
       uses: actions/checkout@v4
       with:
         fetch-depth: 0

     - name: Prepare
       id: prep
       run: |
         idx=1
         while IFS= read -r fixfile; do
           echo "$fixfile" >> all_fixes.txt
           idx=$((idx+1))
         done < fix_files.txt

     - name: Run AI and create PRs per fix
       run: |
         idx=1
         while IFS= read -r fixfile; do
           branch="ai-fix-$idx"
           fixdesc=$(cat "$fixfile")

           # Prompt for the AI
           ai_prompt="Given the following fix description, generate the precise file changes (creations, updates, deletions) to implement it. For each file to be created or updated, output a code block in this format: \`\`\`path=path/to/file.extension<file contents>\`\`\` To delete a file, output a code block in this format: \`\`\`delete=path/to/file.extension \`\`\` Only output code blocks; do not include explanations. Fix description: $fixdesc"

          # Run AI to generate file changes for this fix
          gh copilot workspace code --prompt "$ai_prompt" --output ai_patch.md
           # Parse AI output and apply file changes
           git checkout -b "$branch"
           awk '
             BEGIN {in_code=0; filename=""}
             /^\`\`\`/ {
               if (in_code == 0) {
                 in_code=1
                 if (match($0, /path=([^ ]+)/, arr)) {
                   filename=arr[1]
                   next
                 } else if (match($0, /delete=([^ ]+)/, arr)) {
                   filename=arr[1]
                   system("rm -f " filename)
                   in_code=0
                   next
                 }
               } else {
                 in_code=0
                 filename=""
               }
               next
             }
             {
               if (in_code && filename != "") {
                 print $0 >> filename
               }
             }
           ' ai_patch.md

           git add .
           if git diff --cached --quiet; then
             git checkout main
             git branch -D "$branch"
             idx=$((idx+1))
            continue
           fi
           git commit -m "AI: Apply fix $idx"
           git push origin "$branch"
           gh pr create --base main --head "$branch" --title "AI Fix $idx" --body "Implements fix $idx from AI output. Linked to issue #${{ github.event.issue.number }}."
           idx=$((idx+1))
           git checkout main
         done < all_fixes.txt

  send_comment:
    needs: run_ai
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Comment with AI summary
        run: |
          gh issue comment $ISSUE_NUMBER --body "${{ needs.run_ai.outputs.response }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
