name: Summarize new issues and comments

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]

jobs:
  prepare_resources:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      models: read
      contents: read
    outputs:
      comments: ${{ steps.get_comments.outputs.comments }}
      labels: ${{ steps.get_labels.outputs.labels }}
      repo: ${{ steps.get_repo.outputs.repo }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch past comments (if comment event)
        if: github.event_name == 'issue_comment'
        id: get_comments
        run: |
          COMMENTS=$(gh api repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments --paginate --jq '.[].body' | jq -Rs .)
          echo "comments=$COMMENTS" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get issue labels
        id: get_labels
        run: |
          LABELS=$(gh api repos/${{ github.repository }}/issues/${{ github.event.issue.number }} --jq '.labels[].name' | jq -Rs .)
          echo "labels=$LABELS" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get repo metadata
        id: get_repo
        run: |
          REPO_DATA=$(gh api repos/${{ github.repository }})
          echo "repo=$REPO_DATA" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  run_ai:
    needs: prepare_resources
    runs-on: ubuntu-latest
    permissions:
      issues: write
      models: read
      contents: read
    steps:
      - name: Run AI inference
        id: inference
        uses: actions/ai-inference@v1
        with:
          prompt: |
            {% if github.event_name == 'issues' %}
            Summarize the following GitHub issue in one paragraph:
            Title: ${{ github.event.issue.title }}
            Body: ${{ github.event.issue.body }}
            Labels: ${{ needs.prepare_resources.outputs.labels }}
            Repo: ${{ needs.prepare_resources.outputs.repo }}
            Try to find possible solutions.
            {% else %}
            Summarize the following GitHub comment in one paragraph:
            Issue Title: ${{ github.event.issue.title }}
            Comment: ${{ github.event.comment.body }}
            All Past Comments: ${{ needs.prepare_resources.outputs.comments }}
            Labels: ${{ needs.prepare_resources.outputs.labels }}
            Repo: ${{ needs.prepare_resources.outputs.repo }}
            Try to find possible solutions with the new information.
            {% endif %}
            List the possible solutions. Format the solutions as a bulleted list in MarkDown.

  send_comment:
    needs: run_ai
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Comment with AI summary
        run: |
          gh issue comment $ISSUE_NUMBER --body "${{ needs.run_ai.outputs.response }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
